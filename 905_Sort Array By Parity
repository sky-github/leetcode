#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


class Solution {
public:
    // Solution 1
    // A从前至后遍历，结果分别从result的前后往中间插
    /*vector<int> sortArrayByParity(vector<int>& A)
    {
        int n = A.size();
        int pLeft=0,pRight=n-1;
        vector<int> result(n);
        for(int i=0;i<n;i++)
        {
            if(isEven(A[i]))
            {
                result[pLeft]=A[i];
                pLeft++;
            }else
            {
                result[pRight]=A[i];
                pRight--;
            }
        }
        return result;
    }*/

    //Solution 2
    // 双指针，遇到前后指针奇偶规则，则交换
    vector<int> sortArrayByParity(vector<int>& A)
    {
        int n=A.size();
        int pLeft=0,pRight=n-1;
        while(pLeft<pRight)
        {
            while(isEven(A[pLeft]) && pLeft<n-1) pLeft++;
            while(!isEven(A[pRight]) && pRight>0) pRight--;
            if(!isEven(A[pLeft]) && isEven(A[pRight]) && pLeft<pRight)
            {
                int temp = A[pLeft];
                A[pLeft] = A[pRight];
                A[pRight]= temp;
                pLeft++;
                pRight--;
            }
        }
        return A;
    }

    bool isEven(int number)
    {
        if(0==number%2) return true;
        else return false;
    }
};

int main() {

    Solution su;
    vector<int> input = {3,1,2,4};
    vector<int> output = su.sortArrayByParity(input);
    for(int i=0;i<output.size();i++){
        cout << output[i] << " ";
    }

    std::cout << "Hello, World!" << std::endl;
    return 0;
}
